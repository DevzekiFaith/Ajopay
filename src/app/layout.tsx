import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import BackButton from "@/components/BackButton";
import Script from "next/script";
import { Toaster } from "sonner";
import { getSupabaseServerClient } from "@/lib/supabase/server";
import { MorphModal } from "@/components/ui/morph-modal";
import { LayoutDashboard, UserRound, BadgePercent, Shield, LogIn } from "lucide-react";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "AjoPay-Thriftly",
  description: "Generated by create next app",
  manifest: "/manifest.webmanifest",
  icons: {
    icon: "/aj2.png",
    shortcut: "/aj2.png",
    apple: "/aj2.png",
  },
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const supabase = getSupabaseServerClient();
  const {
    data: { user },
  } = await supabase.auth.getUser();
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {/* Theme init: read localStorage and apply class before hydration */}
        <Script id="theme-init" strategy="beforeInteractive">
          {`
            try {
              const stored = localStorage.getItem('theme');
              const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
              const theme = stored || (prefersDark ? 'dark' : 'light');
              document.documentElement.classList.toggle('dark', theme === 'dark');
            } catch {}
          `}
        </Script>
        <BackButton />
        {children}
        {/* Mobile floating morph modal trigger - show always; contents depend on auth */}
        <div className="sm:hidden fixed bottom-5 right-5 z-40">
          <MorphModal
            trigger={
              <button
                aria-label="Open menu"
                className="h-12 w-12 rounded-2xl border border-white/20 dark:border-white/10 bg-white/20 dark:bg-white/10 backdrop-blur-2xl shadow-[8px_8px_24px_rgba(0,0,0,0.25),_-8px_-8px_24px_rgba(255,255,255,0.08)] grid place-items-center text-sm"
              >
                •••
              </button>
            }
            title="Quick Actions"
            description={user ? "Handy shortcuts for mobile" : "Sign in to access the app"}
          >
            <div className="grid gap-2 text-sm">
              {user ? (
                <>
                  <a href="/dashboard" className="hover:opacity-80 flex items-center gap-2">
                    <LayoutDashboard className="h-4 w-4" />
                    <span>Dashboard</span>
                  </a>
                  <a href="/customer" className="hover:opacity-80 flex items-center gap-2">
                    <UserRound className="h-4 w-4" />
                    <span>Customer</span>
                  </a>
                  <a href="/agent" className="hover:opacity-80 flex items-center gap-2">
                    <BadgePercent className="h-4 w-4" />
                    <span>Agent</span>
                  </a>
                  <a href="/admin" className="hover:opacity-80 flex items-center gap-2">
                    <Shield className="h-4 w-4" />
                    <span>Admin</span>
                  </a>
                </>
              ) : (
                <a href="/sign-in" className="hover:opacity-80 flex items-center gap-2">
                  <LogIn className="h-4 w-4" />
                  <span>Sign In</span>
                </a>
              )}
            </div>
          </MorphModal>
        </div>
        {user && (
          <footer className="w-full mt-10 py-6 text-center text-sm text-gray-600 dark:text-gray-300/70">
            © Yonan Technologies, 2025
          </footer>
        )}
        <Toaster richColors position="top-right" closeButton />
        {/* Register Service Worker */}
        <Script id="sw-register" strategy="afterInteractive">{
          `if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
              navigator.serviceWorker.register('/sw.js').catch(() => {});
            });
          }`
        }</Script>
      </body>
    </html>
  );
}
